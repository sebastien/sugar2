# -----------------------------------------------------------------------------
# Project           : Sugar2
# -----------------------------------------------------------------------------
# Author            : FFunction
# License           : BSD License
# -----------------------------------------------------------------------------
# Creation date     : 2016-11-01
# Last modification : 2017-02-03
# -----------------------------------------------------------------------------

@module sugar2.parser
@import libparsing

@class Parser

	@property version
	@property command
	@property logger
	@property grammar
	@property builderClass

	@constructor command, version=2
		self version = version
		self grammar = createGrammar (version)
		self command = command
		self logger  = command environment report
	@end

	@method createGrammar version=self version
		if version == 1
			@embed Python
			|import sugar2.v1.program
			|return sugar2.v1.program.createProgramGrammar()
			@end
		else
			@embed Python
			|import sugar2.v2.program
			|return sugar2.v2.program.createProgramGrammar()
			@end
		end
	@end

	@method createBuilder path, version=self version
		var builder = None
		if version == 1
			@embed Python
			|import sugar2.v1.writer
			|builder = sugar2.v1.writer.LambdaFactoryBuilder
			@end
		else
			@embed Python
			|import sugar2.v2.writer
			|builder = sugar2.v2.writer.LambdaFactoryBuilder
			@end
		end
		return builder(grammar, path)
	@end

	@method parseString text, moduleName, path
		# TODO: I think this is still using a pre-libparsing API, so
		# we need to udpate that part.
		var result    = grammar parseString (text)
		# FIXME: Why is this tied to a path?
		var builder   = createBuilder (path)
		# @embed Python
		# |import ipdb;ipdb.set_trace()
		# @end
		# FIXME: This is not work properly, the result offset in particular is off
		if result isPartial ()
			let r = result lastMatchRange ()
			let t = result text
			logger error (result describe ())
			return [text, None]
		elif result isFailure ()
			let r = result lastMatchRange ()
			let t = result text
			logger error (result describe ())
			return [text, None]
		elif result isSuccess ()
			var module    = builder process (result match)
			return [text, module]
		end
	@end

@end

# EOF - vim: ts=4 sw=4 noet
