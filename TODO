== Sugar 2.0
-- To-do


Tools
=====

- `ctags-like` wrapper
- syntax highlighting for many editors

Syntax 
======

Incompatible changes
--------------------

[X] Removed `@end` and `end`::

	These served as explicit guards against copy/paste, but in practice
	this cause the code to be more verbose without providing much benefit.

	```
	if condition
		statements‥
	else
		statements‥
	end
	``` 

	becomes

	```
	if condition
		statements‥
	else
		statements‥
	``` 

	and 

	```
	@function f
		statements‥
	@end
	``` 

	becomes

	```
	@function f
		statements‥
	``` 

[X] Conditional expresssions::

	Conditional expressions were redundant with single-line conditionals

	```
	if CONDITION -> EXPRESSION (| CONDITION -> EXPRESSION)* | EXPRESSION
	```

	They are now unambiguously expressed as

	```
	EXPRESSION if CONDITION else EXPRESSION
	```

[X] Single-line conditionals::

	Single line conditionals have been removed

	```
	if   condition -> statements...
	elif condition -> statements...
	else           -> statements...
	```

	and replaced with the now more compact standard form

	```
	if condition
		statements...
	elif condition
		statements...
	else
		statements...
	```

[X] Embeds::

	Embeds previously were like

	```
	@embed JavaScript
	|...
	@end
	```
	
	and wow have the regular syntax


	```
	@embed JavaScript
		...
	```

Syntax fixes
------------

[X] Dict keys::

	Expressions as dict keys need to be surrounded by parens, and 
	this inlcudes strings:

	```
	{("a"):"a"}
	```

	now parens are unnecessary for string litterals:

	```
	{"a":"a"}
	```

New features
------------

0.0 Comments & documentations

[X] Comments in maps/lists::

	Comments are allowed within *lists*, *maps* and *tuples*.

	```
	{
		value: 1 # EOL line comment
		# value: 2 -- Value commented out
	}
	[
		1 # EOL comment
		# 2 Value commented out
	]
	(
		0
		value= 1 # Some comment
		# value: 1 -- Value commented out
	)
	```

0.0 Litterals

[X] Multi-line strings::

	```
	# Just like in Python
	"""asdsads
	asdsadas"""
	```

	```
	let a = """
	string on 
	multiple lines
	"""

	if c:
		let b = """
		string
		on 
		multiple
		lines
		"""
	```

[X] String format/interpolation::

	When the '%' operator is invoked with a string as 
	`lvalue`, it will
	be expanded to a string interpolation, which
	has an operator priority equivalen to the '%' operator.

	```
	"{0:d} {1:d}" % [10, 20]
	"{a:d} {b:d}" % {a:10, b:20}
	```

	The format of the string is `{KEY:FORMAT}` where `:FORMAT`
	is optional and key either a digit (index) or key.

[X] Tuples::

	```
	(1,2,3,4)
	```

	```
	() 
	(1)
	(1, 2, 3)
	() 
	(1) 
	```

[X] Named tuples::

	```
	(a=1, b=2, c=3, 4)
	```


[X] Map setdefault/assign if not null::

	a[1] ?= 1.0
	
	equals to

	if not isDefined(a[1]) -> a[1] = 1.0

[X] Map implicit keys::

	```
	let a = 10
	let d = {a}
	assert (cmp( d, {a:10} ) == 0)
	```

[X] Hex/Bit/Octal notation::

	```
	0xFF
	0b011010101
	0o744
	```

0.0 Operations

[ ] Exitential operator::


	The *existential operator* `?` will  yield `Undefined` if any
	of resolution within the expression fails.

	```
	var a = (A B C D)? E
	```

	this typically gets converted into something like

	```
	var a = A B C D if (A and exists(A B) and exists(A B C) and exists(A B C D)) else E
	```

[X] Line continuation::

	Lines can be continued by suffixing with `‥` or `...` and indenting the
	next lines, note that only expressions are valid as lines, no statement or
	block is allowed.

	
	```
	a ()‥
		b ()
		c ()
	```

	is equivalent to

	``` 
	a () b () c ()
	```

	the syntax goes particularily well with special operators to
	express the continuation of a process:

	```
	0..10‥
		::= {_ * 10}
		::? {_ > 50}
	```


[X] Chaining::


	Chaining is a variant of line continuation where expressions
	will all be applied on the same value.

	```
	a () :
		b ()
		c ()
	```

	is equivalent to

	```
	let _ = a ()
	_ b ()
	_ c ()
	```
	
 	chains can also be nested

	```
	a:
		b ()
		c () :
			d ()
	```
	
	which equals to

	```
	var _ = a
	a b ()
	_ = a c ()
	_ d ()
	```

[ ] Pattern matching::

	Pattern matching allows to match any value/expression according to
	predicates. It is similar to an else/if syntax but supports two special cases:

	`_` to evaluate to the matched value, and `else` to match the rest.

	```
	match getResult()
		type? String
			"A string"
		type? Number and _ > 10
			"A number"
		type? Number > and _ < 0
			"A negative number"
		else
			"Rest"
	```

	as a specific chain type

	```
	expression match
		type? String
			expression
		type? Number
			expression
	```

	Note that the only gotcha is that if you're testing agains a member you
	should make sure you use th following syntax

	```
	EXPR match
		.A
		.B


0.0 Declaration/Invocation

[X] Default arguments::

	```
	@function f a=0, b=1, c=2
	@end
	```

[ ] Named arguments::
	
	```
	@function i a, b, rest...
	@end
	```

	```
	@function i a, b, rest..., options=...
	@end
	```

[X] Function pipes::

	The pipe `|` syntax can be used to chain functions in an expression. The first expression can contain
	no argument, but the other expressions must contain the `_` variable to be valid. 

	```
	a () | b (1,2,_) | c(2,3,_)
	```

	is equivalent to 

	```
	c(2, 3, b(1, 2, a()))
	```

	Note that if there are multiple occurences of `_` in an invocation, the whole
	left expression will be duplicated:

	```
	a () | b (_,_,_)
	```

	will be expanded to

	```
	b (a(), a(), a())
	```


0.0 Semantics

[ ] Generators::

	```
	var f = {
		for a in 0..100
			yield a
		end
	}
	```

0.0 Structure

[X] Singleton::

	declares a singleton object that will be initialized during module initialization. 

	```
	@singleton NAME: PARENT
		@property ‥
		@constructor ‥
		@method ‥
	```

[X] Trait::

	Traits are a collection of properties and methods that can be mixed-in with classes. 
	Classes retain the primary mode of inheritence, and traits will be merged in their
	order of declaration.

	```
	@trait A: PARENT
		@property ‥
		@constructor ‥
		@method ‥
	

	@class C0
		pass
	
	# Declares C1 as inheriting from C0 and merging trait A
	@class C1: C0,A
		pass

	# Declares C1 as merging trait A with the default Object class
	@class C1: A
		pass
		
	```

[X] Decorators::

	```
	@function decorate f, a
		f __value = a
		return f
	@end

	@function pouet
	!decorate (_,10)
	```

[X] Continue/break::

	```
	for a,b in 0..10
		if a == 5
			continue
		elif a > 7
			break
		end
	end
	```

0.0 Syntax Sugar

[X] Automatic variables::

	```
	_  == arguments[0]
	_0 == arguments[0]
	_1 == arguments[1]
	_2 == arguments[2]
	```

[X] Implicit return::

	```
	{_| _ + 1}
	```

[X] Map/filter/... operators::

	```
	Filter  VALUE ::? PREDICATE
	Map     VALUE ::= EXTRACTOR
	Reduce  VALUE ::> EXTRACTOR
	ReduceR VALUE ::< EXTRACTOR
	```

[ ] List comprehensions / generators::

	```
	[x * 2 for x in COLLECTION if CONDITION]
	(x * 2 for x in COLLECTION if CONDITION)
	```

0.0 Meta-information/meta-programming

[ ] Special variables::

	```
	__scope__       # A reference to the current scope object (if permitted)
	__scope_name__  # The fully-qualified name of the scope
	__scope_type__  # The type of the current scope (all lowercase)

	__module__      # A reference to the current module
	__module_name__ # The fully-qualified name of the current module

	__class__
	__class_name__

	__method__
	__method_name__

	__function__
	__function_name__

	__class__
	__class_name__

	__line__        # The line number, as an int
	__file__        # The current file name, as a string
	```

	and so in code

	```
	error (__scope_name__ + ":" __line__ + " error‥")
	```

[ ] Type identification::

	A new operator `type?` allows to test for type identification. It is
	a more generic version of `typeof` and `instanceof` in JavaScript
	and is able to expand to the full semantics of the type system.

	```
	value type? Number
	```

[ ] Macros::

	```
	@macro name( a, b, c )
		$a = pouet
		$b = pouet
		$c = pouet
	@end

	@function f
		@name(a,b,c)
	@end
	```

	will produce the code $a, $b, $c

	```
	@function f
		a = pouet
		b = pouet
		c = pouet
	@end
	```


[ ] Setdefault::

	```
	var a = {}
	a ["asdsa" ?= {}]["pouet"] = 10
	```


[X] Bit-logic operator::
	
	```
	&&
	||
	!
	```

[X] Infix operator::

	The operator '~' followed by a name will consider 
	the name as an invocation on an infix function:

	```
	e ~map extractor 
	```

	is equivalent to

	```
	map (e, extractor)
	```

[X] Events::

	Events can now be declared as class properties using the @event
	keyword:

	```
	@event success
	| Documentation
	```



	Events can then be triggered using the `!` operator

	```
	success !
	success ! (arguments)
	```

	It is possible to bind to an event using the `!+` operator

	```
	value success !+ callback
	```

	and unbind using the `!-` operator:

	```
	value success !- callback
	```


[X] Streamlined mappings::

	```
	_ :: connector Project fold :: {_| (group[_ discipline [-1]] ?= []) push (_)}
	```

[ ] Design-by-contract Assert/pre/post/error::	

	```
	@function f
	@pre   expresssion error message
	@post  expression  error message
		body
	@where
		Test case
	@end
	```

[ ] @where
[ ] @example
[ ] @type
[ ] @enum

# EOF

